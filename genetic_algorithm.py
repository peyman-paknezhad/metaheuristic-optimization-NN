# -*- coding: utf-8 -*-
"""genetic algorithm

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LE8w1imwEafq1fFYKC-k9NHaqHl8CGEi
"""

# Train the neural network
def train(net, X_train, y_train, X_test, y_test, threshold=0.95, max_epochs=1000):
    epoch = 0
    train_losses = []
    test_accuracies = []
    start_time = time.time()
    while True:
        # Training
        net.train()
        outputs = net(X_train)
        train_loss = criterion(outputs, y_train)

        optimizer.zero_grad()
        train_loss.backward()
        optimizer.step()

        _, train_predicted = torch.max(outputs.data, 1)
        train_accuracy = (train_predicted == y_train).sum().item() / y_train.size(0)

        epoch += 1
        train_losses.append(train_loss.item())

        # Testing
        net.eval()
        with torch.no_grad():
            test_outputs = net(X_test)
            test_loss = criterion(test_outputs, y_test)

            _, test_predicted = torch.max(test_outputs.data, 1)
            test_accuracy = (test_predicted == y_test).sum().item() / y_test.size(0)

        test_accuracies.append(test_accuracy)

        if epoch % 10 == 0:
            print(f"Epoch: {epoch}, Train Loss: {train_loss.item()}, Train Accuracy: {train_accuracy}, Test Loss: {test_loss.item()}, Test Accuracy: {test_accuracy}")

        if train_accuracy >= threshold or epoch >= max_epochs:
            break

    end_time = time.time()
    training_time = end_time - start_time
    return train_accuracy, test_accuracy, train_losses, test_accuracies, training_time

# Run the training
train_accuracy, test_accuracy, train_losses, test_accuracies, training_time = train(net, X_train, y_train, X_test, y_test)
print("Training Accuracy:", train_accuracy)
print("Test Accuracy:", test_accuracy)
print("Training Time:", training_time, "seconds")

