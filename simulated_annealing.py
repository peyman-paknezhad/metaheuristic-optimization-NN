# -*- coding: utf-8 -*-
"""simulated annealing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mhlJteHY1sgNsaithKE561egXVq2VQHd
"""

import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import time
import matplotlib.pyplot as plt

# Load the Iris dataset
iris = load_iris()
X = iris.data
y = iris.target

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the input features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Convert the data to PyTorch tensors
X_train_tensor = torch.tensor(X_train_scaled, dtype=torch.float32).cuda()
y_train_tensor = torch.tensor(y_train, dtype=torch.long).cuda()
X_test_tensor = torch.tensor(X_test_scaled, dtype=torch.float32).cuda()
y_test_tensor = torch.tensor(y_test, dtype=torch.long).cuda()

# Define the neural network architecture
class NeuralNetwork(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(NeuralNetwork, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.relu = nn.ReLU()
        self.fc2 = nn.Linear(hidden_size, output_size)

    def forward(self, x):
        x = self.fc1(x)
        x = self.relu(x)
        x = self.fc2(x)
        return x

# Define the objective function to be optimized
def objective_function(hidden_size):
    # Create a neural network classifier with the given hidden size
    model = NeuralNetwork(input_size=4, hidden_size=hidden_size, output_size=3).cuda()

    # Define the loss function and optimizer
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.01)

    # Train the neural network classifier
    num_epochs = 100
    start_time = time.time()
    train_losses = []
    for epoch in range(num_epochs):
        optimizer.zero_grad()
        outputs = model(X_train_tensor)
        loss = criterion(outputs, y_train_tensor)
        loss.backward()
        optimizer.step()
        train_losses.append(loss.item())
    end_time = time.time()

    # Evaluate the classifier on the training set
    with torch.no_grad():
        outputs = model(X_train_tensor)
        _, predicted = torch.max(outputs.data, 1)
        train_accuracy = (predicted == y_train_tensor).sum().item() / y_train_tensor.size(0)

    # Evaluate the classifier on the testing set
    with torch.no_grad():
        outputs = model(X_test_tensor)
        _, predicted = torch.max(outputs.data, 1)
        test_accuracy = (predicted == y_test_tensor).sum().item() / y_test_tensor.size(0)

    # Return the negative test accuracy (to be minimized)
    return -test_accuracy, train_accuracy, end_time - start_time, train_losses

# Define the initial solution
initial_solution = 10

# Define the temperature schedule
initial_temperature = 100
final_temperature = 0.1
cooling_rate = 0.02

# Define the number of iterations
num_iterations = 1000

# Initialize the current solution and objective value
current_solution = initial_solution
current_objective, current_train_accuracy, current_runtime, current_train_losses = objective_function(current_solution)

# Initialize the best solution and objective value
best_solution = current_solution
best_objective = current_objective
best_train_accuracy = current_train_accuracy
best_runtime = current_runtime
best_train_losses = current_train_losses

# Perform simulated annealing
start = time.time()
for iteration in range(num_iterations):
    # Generate a new candidate solution by perturbing the current solution
    candidate_solution = np.random.randint(1, 50)

    # Evaluate the objective function for the candidate solution
    candidate_objective, candidate_train_accuracy, candidate_runtime, candidate_train_losses = objective_function(candidate_solution)

    # Calculate the acceptance probability
    temperature = initial_temperature * (1 - iteration / num_iterations) ** cooling_rate
    acceptance_probability = np.exp((current_objective - candidate_objective) / temperature)

    # Accept or reject the candidate solution based on the acceptance probability
    if candidate_objective < current_objective or np.random.rand() < acceptance_probability:
        current_solution = candidate_solution
        current_objective = candidate_objective
        current_train_accuracy = candidate_train_accuracy
        current_runtime = candidate_runtime
        current_train_losses = candidate_train_losses

    # Update the best solution if necessary
    if candidate_objective < best_objective:
        best_solution = candidate_solution
        best_objective = candidate_objective
        best_train_accuracy = candidate_train_accuracy
        best_runtime = candidate_runtime
        best_train_losses = candidate_train_losses
end = time.time()
time = end - start

# Print the best solution, objective value, train/test accuracy, and runtime
print("Train Accuracy:", best_train_accuracy)
print("Test Accuracy:", -best_objective)
print("Time:", time, "seconds")

# Plot the training loss
plt.plot(best_train_losses)
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Training Loss')
plt.show()

